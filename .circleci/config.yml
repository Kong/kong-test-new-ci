version: 2.0
jobs:
  lint-and-unit-test:
    docker:
      - image: circleci/golang:buster
    environment:
      TEST_SUITE: unit
      KONG_BUILD_TOOLS: origin/test/pdk
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: "Lint & Unit test Lua code"
          command: |
            export KONG_SOURCE_LOCATION=$CIRCLE_WORKING_DIRECTORY
            make setup-kong-build-tools
            cd ../kong-build-tools && make kong-test-container
            make setup-kong-build-tools
            cd ../kong-build-tools && make test-kong
  postgres-integration:
    docker:
      - image: circleci/golang:buster
      - image: circleci/postgres:latest
        environment:
          POSTGRES_USER: kong_tests
          POSTGRES_DB: kong_tests
    environment:
      KONG_TEST_PG_DATABASE: kong_tests
      KONG_TEST_PG_USER: kong_tests
      KONG_TEST_DATABASE: postgres
      TEST_SUITE: integration
      GOPATH: /home/circleci/install-cache
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum ".ci/setup_env.sh" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".requirements" }}
      - run: sudo apt update
      - run: sudo apt install build-essential libpcre3-dev zlib1g-dev libyaml-dev simpleproxy
      - run:
          name: "Start gRPC server"
          background: true
          command: |
            simpleproxy -L 15002 -R grpcb.in:9000 &
            simpleproxy -L 15003 -R grpcb.in:9001 &
      - run:
          name: "Unit tests"
          command: |
            export INSTALL_ROOT=$HOME/install-cache
            export OPENSSL_INSTALL=$INSTALL_ROOT/openssl
            export OPENRESTY_INSTALL=$INSTALL_ROOT/openresty
            export LUAROCKS_INSTALL=$INSTALL_ROOT/luarocks

            export OPENSSL_DIR=$OPENSSL_INSTALL # for LuaSec install

            export PATH=$OPENSSL_INSTALL/bin:$OPENRESTY_INSTALL/nginx/sbin:$OPENRESTY_INSTALL/bin:$LUAROCKS_INSTALL/bin:$GOPATH/bin:$PATH
            export LD_LIBRARY_PATH=$OPENSSL_INSTALL/lib:$LD_LIBRARY_PATH # for openssl's CLI invoked in the test suite
            eval `luarocks path`

            .ci/run_tests.sh
  cassandra2-integration:
    docker:
      - image: circleci/golang:buster
      - image: cassandra:2.2
      - image: circleci/postgres:latest
        environment:
          POSTGRES_USER: kong_tests
          POSTGRES_DB: kong_tests
    environment:
      KONG_TEST_DATABASE: cassandra
      TEST_SUITE: integration
      GOPATH: /home/circleci/install-cache
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum ".ci/setup_env.sh" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".requirements" }}
      - run: sudo apt update
      - run: sudo apt install build-essential libpcre3-dev zlib1g-dev libyaml-dev simpleproxy
      - run:
          name: "Start gRPC server"
          background: true
          command: |
            simpleproxy -L 15002 -R grpcb.in:9000 &
            simpleproxy -L 15003 -R grpcb.in:9001 &
      - run:
          name: "Wait for Cassandra to be up and running"
          command: |
            curl -sSL https://s3.amazonaws.com/circle-downloads/wait-for-cassandra.sh | sh
      - run:
          name: "Unit tests"
          command: |
            export INSTALL_ROOT=$HOME/install-cache
            export OPENSSL_INSTALL=$INSTALL_ROOT/openssl
            export OPENRESTY_INSTALL=$INSTALL_ROOT/openresty
            export LUAROCKS_INSTALL=$INSTALL_ROOT/luarocks

            export OPENSSL_DIR=$OPENSSL_INSTALL # for LuaSec install

            export PATH=$OPENSSL_INSTALL/bin:$OPENRESTY_INSTALL/nginx/sbin:$OPENRESTY_INSTALL/bin:$LUAROCKS_INSTALL/bin:$GOPATH/bin:$PATH
            export LD_LIBRARY_PATH=$OPENSSL_INSTALL/lib:$LD_LIBRARY_PATH # for openssl's CLI invoked in the test suite
            eval `luarocks path`

            .ci/run_tests.sh
  cassandra3-integration:
    docker:
      - image: circleci/golang:buster
      - image: cassandra:3.9
      - image: circleci/postgres:latest
        environment:
          POSTGRES_USER: kong_tests
          POSTGRES_DB: kong_tests
    environment:
      KONG_TEST_DATABASE: cassandra
      TEST_SUITE: integration
      GOPATH: /home/circleci/install-cache
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum ".ci/setup_env.sh" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".requirements" }}
      - run: sudo apt update
      - run: sudo apt install build-essential libpcre3-dev zlib1g-dev libyaml-dev simpleproxy
      - run:
          name: "Start gRPC server"
          background: true
          command: |
            simpleproxy -L 15002 -R grpcb.in:9000 &
            simpleproxy -L 15003 -R grpcb.in:9001 &
      - run:
          name: "Wait for Cassandra to be up and running"
          command: |
            curl -sSL https://s3.amazonaws.com/circle-downloads/wait-for-cassandra.sh | sh
      - run:
          name: "Unit tests"
          command: |
            export INSTALL_ROOT=$HOME/install-cache
            export OPENSSL_INSTALL=$INSTALL_ROOT/openssl
            export OPENRESTY_INSTALL=$INSTALL_ROOT/openresty
            export LUAROCKS_INSTALL=$INSTALL_ROOT/luarocks

            export OPENSSL_DIR=$OPENSSL_INSTALL # for LuaSec install

            export PATH=$OPENSSL_INSTALL/bin:$OPENRESTY_INSTALL/nginx/sbin:$OPENRESTY_INSTALL/bin:$LUAROCKS_INSTALL/bin:$GOPATH/bin:$PATH
            export LD_LIBRARY_PATH=$OPENSSL_INSTALL/lib:$LD_LIBRARY_PATH # for openssl's CLI invoked in the test suite
            eval `luarocks path`

            .ci/run_tests.sh
  dbless-integration:
    docker:
      - image: circleci/golang:buster
    environment:
      KONG_TEST_DATABASE: "off"
      TEST_SUITE: dbless
      GOPATH: /home/circleci/install-cache
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum ".ci/setup_env.sh" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".requirements" }}
      - run: sudo apt update
      - run: sudo apt install build-essential libpcre3-dev zlib1g-dev libyaml-dev simpleproxy
      - run:
          name: "Start gRPC server"
          background: true
          command: |
            simpleproxy -L 15002 -R grpcb.in:9000 &
            simpleproxy -L 15003 -R grpcb.in:9001 &
      - run:
          name: "Unit tests"
          command: |
            export INSTALL_ROOT=$HOME/install-cache
            export OPENSSL_INSTALL=$INSTALL_ROOT/openssl
            export OPENRESTY_INSTALL=$INSTALL_ROOT/openresty
            export LUAROCKS_INSTALL=$INSTALL_ROOT/luarocks

            export OPENSSL_DIR=$OPENSSL_INSTALL # for LuaSec install

            export PATH=$OPENSSL_INSTALL/bin:$OPENRESTY_INSTALL/nginx/sbin:$OPENRESTY_INSTALL/bin:$LUAROCKS_INSTALL/bin:$GOPATH/bin:$PATH
            export LD_LIBRARY_PATH=$OPENSSL_INSTALL/lib:$LD_LIBRARY_PATH # for openssl's CLI invoked in the test suite
            eval `luarocks path`

            .ci/run_tests.sh
  postgres-plugins:
    docker:
      - image: circleci/golang:buster
      - image: circleci/postgres:latest
        environment:
          POSTGRES_USER: kong_tests
          POSTGRES_DB: kong_tests
    environment:
      KONG_TEST_PG_DATABASE: kong_tests
      KONG_TEST_PG_USER: kong_tests
      KONG_TEST_DATABASE: postgres
      TEST_SUITE: plugins
      GOPATH: /home/circleci/install-cache
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum ".ci/setup_env.sh" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".requirements" }}
      - run: sudo apt update
      - run: sudo apt install build-essential libpcre3-dev zlib1g-dev libyaml-dev simpleproxy
      - run:
          name: "Start gRPC server"
          background: true
          command: |
            simpleproxy -L 15002 -R grpcb.in:9000 &
            simpleproxy -L 15003 -R grpcb.in:9001 &
      - run:
          name: "Unit tests"
          command: |
            export INSTALL_ROOT=$HOME/install-cache
            export OPENSSL_INSTALL=$INSTALL_ROOT/openssl
            export OPENRESTY_INSTALL=$INSTALL_ROOT/openresty
            export LUAROCKS_INSTALL=$INSTALL_ROOT/luarocks

            export OPENSSL_DIR=$OPENSSL_INSTALL # for LuaSec install

            export PATH=$OPENSSL_INSTALL/bin:$OPENRESTY_INSTALL/nginx/sbin:$OPENRESTY_INSTALL/bin:$LUAROCKS_INSTALL/bin:$GOPATH/bin:$PATH
            export LD_LIBRARY_PATH=$OPENSSL_INSTALL/lib:$LD_LIBRARY_PATH # for openssl's CLI invoked in the test suite
            eval `luarocks path`

            .ci/run_tests.sh
  cassandra2-plugins:
    docker:
      - image: circleci/golang:buster
      - image: cassandra:2.2
      - image: circleci/postgres:latest
        environment:
          POSTGRES_USER: kong_tests
          POSTGRES_DB: kong_tests
    environment:
      KONG_TEST_DATABASE: cassandra
      TEST_SUITE: plugins
      GOPATH: /home/circleci/install-cache
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum ".ci/setup_env.sh" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".requirements" }}
      - run: sudo apt update
      - run: sudo apt install build-essential libpcre3-dev zlib1g-dev libyaml-dev simpleproxy
      - run:
          name: "Start gRPC server"
          background: true
          command: |
            simpleproxy -L 15002 -R grpcb.in:9000 &
            simpleproxy -L 15003 -R grpcb.in:9001 &
      - run:
          name: "Wait for Cassandra to be up and running"
          command: |
            curl -sSL https://s3.amazonaws.com/circle-downloads/wait-for-cassandra.sh | sh
      - run:
          name: "Unit tests"
          command: |
            export INSTALL_ROOT=$HOME/install-cache
            export OPENSSL_INSTALL=$INSTALL_ROOT/openssl
            export OPENRESTY_INSTALL=$INSTALL_ROOT/openresty
            export LUAROCKS_INSTALL=$INSTALL_ROOT/luarocks

            export OPENSSL_DIR=$OPENSSL_INSTALL # for LuaSec install

            export PATH=$OPENSSL_INSTALL/bin:$OPENRESTY_INSTALL/nginx/sbin:$OPENRESTY_INSTALL/bin:$LUAROCKS_INSTALL/bin:$GOPATH/bin:$PATH
            export LD_LIBRARY_PATH=$OPENSSL_INSTALL/lib:$LD_LIBRARY_PATH # for openssl's CLI invoked in the test suite
            eval `luarocks path`

            .ci/run_tests.sh
  cassandra3-plugins:
    docker:
      - image: circleci/golang:buster
      - image: cassandra:3.9
      - image: circleci/postgres:latest
        environment:
          POSTGRES_USER: kong_tests
          POSTGRES_DB: kong_tests
    environment:
      KONG_TEST_DATABASE: cassandra
      TEST_SUITE: plugins
      GOPATH: /home/circleci/install-cache
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum ".ci/setup_env.sh" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".requirements" }}
      - run: sudo apt update
      - run: sudo apt install build-essential libpcre3-dev zlib1g-dev libyaml-dev simpleproxy
      - run:
          name: "Start gRPC server"
          background: true
          command: |
            simpleproxy -L 15002 -R grpcb.in:9000 &
            simpleproxy -L 15003 -R grpcb.in:9001 &
      - run:
          name: "Wait for Cassandra to be up and running"
          command: |
            curl -sSL https://s3.amazonaws.com/circle-downloads/wait-for-cassandra.sh | sh
      - run:
          name: "Unit tests"
          command: |
            export INSTALL_ROOT=$HOME/install-cache
            export OPENSSL_INSTALL=$INSTALL_ROOT/openssl
            export OPENRESTY_INSTALL=$INSTALL_ROOT/openresty
            export LUAROCKS_INSTALL=$INSTALL_ROOT/luarocks

            export OPENSSL_DIR=$OPENSSL_INSTALL # for LuaSec install

            export PATH=$OPENSSL_INSTALL/bin:$OPENRESTY_INSTALL/nginx/sbin:$OPENRESTY_INSTALL/bin:$LUAROCKS_INSTALL/bin:$GOPATH/bin:$PATH
            export LD_LIBRARY_PATH=$OPENSSL_INSTALL/lib:$LD_LIBRARY_PATH # for openssl's CLI invoked in the test suite
            eval `luarocks path`

            .ci/run_tests.sh
workflows:
  version: 2
  build-and-test:
    jobs:
      - lint-and-unit-test
      - postgres-integration:
          requires:
            - lint-and-unit-test
      - cassandra2-integration:
          requires:
            - lint-and-unit-test
      - cassandra3-integration:
          requires:
            - lint-and-unit-test
      - dbless-integration:
          requires:
            - lint-and-unit-test
      - postgres-plugins:
          requires:
            - lint-and-unit-test
      - cassandra2-plugins:
          requires:
            - lint-and-unit-test
      - cassandra3-plugins:
          requires:
            - lint-and-unit-test
